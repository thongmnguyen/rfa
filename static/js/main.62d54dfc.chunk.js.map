{"version":3,"sources":["serviceWorker.js","components/Firebase/context.js","components/Firebase/firebase.js","components/Firebase/index.js","components/SignOut/index.js","constants/routes.js","components/Session/context.js","components/Session/withAuthentication.js","components/Session/withAuthorization.js","components/Navigation/index.js","components/Landing/index.js","components/SignUp/index.js","components/PasswordForget/index.js","components/SignIn/index.js","components/Home/index.js","components/PasswordChange/index.js","components/Account/index.js","components/Admin/index.js","components/App/index.js","index.js"],"names":["Boolean","window","location","hostname","match","FirebaseContext","React","createContext","withFirebase","Component","props","Consumer","firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","user","uid","db","ref","users","app","initializeApp","this","database","type","onClick","HOME","AuthUserContext","withAuthentication","WithAuthentication","state","authUser","listener","onAuthStateChanged","setState","Provider","value","withAuthorization","condition","WithAuthorization","history","push","compose","withRouter","NavigationAuth","to","ROUTES","SignOut","NavigationNonAuth","Navigation","Account","INITIAL_STATE","username","passwordOne","passwordTwo","error","SignUpFormBase","onSubmit","event","then","set","catch","preventDefault","onChange","target","name","isInvalid","placeholder","autoComplete","disabled","message","SignUpLink","SignUpForm","SignUpPage","PasswordForgetFormBase","PasswordForgetLink","PasswordForgetPage","PasswordForgetForm","SignInFormBase","SignInForm","SignInPage","PasswordChangeForm","PasswordChange","AdminPage","loading","on","snapshot","usersObject","val","usersList","Object","keys","map","key","off","UserList","exact","path","component","LandingPage","HomePage","AccountPage","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62d54dfc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst FirebaseContext = React.createContext(null);\n\nexport const withFirebase = Component => props => (\n    <FirebaseContext.Consumer>\n        {firebase => <Component {...props} firebase={firebase} />}\n    </FirebaseContext.Consumer>\n);\n\nexport default FirebaseContext;\n","import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyBBCR1EKFZYbqxNq50NFhXz-sulnuySFl0\",\n    authDomain: \"rjfa-2c310.firebaseapp.com\",\n    databaseURL: \"https://rjfa-2c310.firebaseio.com\",\n    projectId: \"rjfa-2c310\",\n    storageBucket: \"rjfa-2c310.appspot.com\",\n    messagingSenderId: \"661494023452\",\n    appId: \"1:661494023452:web:a77cf5d9d68c736b6c66d9\",\n    measurementId: \"G-93W0T9F8DQ\"\n};\n\nclass Firebase {\n    constructor() {\n        app.initializeApp(firebaseConfig);\n\n        this.auth = app.auth();\n        this.db = app.database();\n    }\n\n    // *** Auth API ***\n\n    doCreateUserWithEmailAndPassword = (email, password) =>\n        this.auth.createUserWithEmailAndPassword(email, password);\n\n    doSignInWithEmailAndPassword = (email, password) =>\n        this.auth.signInWithEmailAndPassword(email, password);\n\n    doSignOut = () => this.auth.signOut();\n\n    doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    doPasswordUpdate = password =>\n        this.auth.currentUser.updatePassword(password);\n\n    // *** User API ***\n\n    user = uid => this.db.ref(`users/${uid}`);\n\n    users = () => this.db.ref(\"users\");\n}\n\nexport default Firebase;\n","import FirebaseContext, { withFirebase } from \"./context\";\nimport Firebase from \"./firebase\";\n\nexport default Firebase;\n\nexport { FirebaseContext, withFirebase };\n","import React from \"react\";\n\nimport { withFirebase } from \"../Firebase\";\n\nconst SignOutButton = ({ firebase }) => (\n    <button type=\"button\" onClick={firebase.doSignOut}>\n        Sign Out\n    </button>\n);\n\nexport default withFirebase(SignOutButton);\n","export const LANDING = \"/\";\nexport const SIGN_UP = \"/signup\";\nexport const SIGN_IN = \"/login\";\nexport const HOME = \"/home\";\nexport const ACCOUNT = \"/account\";\nexport const ADMIN = \"/admin\";\nexport const PASSWORD_FORGET = \"/password-reset\";\n","import React from \"react\";\n\nconst AuthUserContext = React.createContext(null);\n\nexport default AuthUserContext;\n","import React from \"react\";\n\nimport AuthUserContext from \"./context\";\nimport { withFirebase } from \"../Firebase\";\n\nconst withAuthentication = Component => {\n    class WithAuthentication extends React.Component {\n        constructor(props) {\n            super(props);\n\n            this.state = {\n                authUser: null\n            };\n        }\n\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    authUser\n                        ? this.setState({ authUser })\n                        : this.setState({ authUser: null });\n                }\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Provider value={this.state.authUser}>\n                    <Component {...this.props} />\n                </AuthUserContext.Provider>\n            );\n        }\n    }\n\n    return withFirebase(WithAuthentication);\n};\n\nexport default withAuthentication;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\n\nimport AuthUserContext from \"./context\";\nimport { withFirebase } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\n\nconst withAuthorization = condition => Component => {\n    class WithAuthorization extends React.Component {\n        componentDidMount() {\n            this.listener = this.props.firebase.auth.onAuthStateChanged(\n                authUser => {\n                    if (!condition(authUser)) {\n                        this.props.history.push(ROUTES.SIGN_IN);\n                    }\n                }\n            );\n        }\n\n        componentWillUnmount() {\n            this.listener();\n        }\n\n        render() {\n            return (\n                <AuthUserContext.Consumer>\n                    {authUser =>\n                        condition(authUser) ? (\n                            <Component {...this.props} />\n                        ) : null\n                    }\n                </AuthUserContext.Consumer>\n            );\n        }\n    }\n\n    return compose(\n        withRouter,\n        withFirebase\n    )(WithAuthorization);\n};\n\nexport default withAuthorization;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport SignOutButton from \"../SignOut\";\nimport * as ROUTES from \"../../constants/routes\";\n\nimport { AuthUserContext } from \"../Session\";\n\nconst Navigation = () => (\n    <div>\n        <AuthUserContext.Consumer>\n            {authUser =>\n                authUser ? <NavigationAuth /> : <NavigationNonAuth />\n            }\n        </AuthUserContext.Consumer>\n    </div>\n);\n\nconst NavigationAuth = () => (\n    <ul>\n        <li>\n            <Link to={ROUTES.LANDING}>Landing</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.HOME}>Home</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.ACCOUNT}>Account</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.ADMIN}>Admin</Link>\n        </li>\n        <li>\n            <SignOutButton />\n        </li>\n    </ul>\n);\n\nconst NavigationNonAuth = () => (\n    <ul>\n        <li>\n            <Link to={ROUTES.LANDING}>Landing</Link>\n        </li>\n        <li>\n            <Link to={ROUTES.SIGN_IN}>Sign In</Link>\n        </li>\n    </ul>\n);\n\nexport default Navigation;\n","import React from \"react\";\n\nconst Account = () => {\n    return (\n        <div>\n            <h1>Landing</h1>\n        </div>\n    );\n};\n\nexport default Account;\n","import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nimport { withFirebase } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\n\nconst SignUpPage = () => (\n    <div>\n        <h1>SignUp</h1>\n        <SignUpForm />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    username: \"\",\n    email: \"\",\n    passwordOne: \"\",\n    passwordTwo: \"\",\n    error: null\n};\n\nclass SignUpFormBase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { username, email, passwordOne } = this.state;\n\n        this.props.firebase\n            .doCreateUserWithEmailAndPassword(email, passwordOne)\n            .then(authUser => {\n                // Create a user in your Firebase realtime database\n                this.props.firebase\n                    .user(authUser.user.uid)\n                    .set({\n                        username,\n                        email\n                    })\n                    .then(() => {\n                        this.setState({ ...INITIAL_STATE });\n                        this.props.history.push(ROUTES.HOME);\n                    })\n                    .catch(error => {\n                        this.setState({ error });\n                    });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { username, email, passwordOne, passwordTwo, error } = this.state;\n\n        const isInvalid =\n            passwordOne !== passwordTwo ||\n            passwordOne === \"\" ||\n            email === \"\" ||\n            username === \"\";\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"username\"\n                    value={username}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Full Name\"\n                />\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    autoComplete=\"username\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"passwordOne\"\n                    value={passwordOne}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    autoComplete=\"new-password\"\n                    placeholder=\"Password\"\n                />\n                <input\n                    name=\"passwordTwo\"\n                    value={passwordTwo}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    autoComplete=\"new-password\"\n                    placeholder=\"Confirm Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign Up\n                </button>\n\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst SignUpLink = () => (\n    <p>\n        Don't have an account? <Link to={ROUTES.SIGN_UP}>Sign Up</Link>\n    </p>\n);\nconst SignUpForm = withRouter(withFirebase(SignUpFormBase));\nexport default SignUpPage;\nexport { SignUpForm, SignUpLink };\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { withFirebase } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\n\nconst PasswordForgetPage = () => (\n    <div>\n        <h1>PasswordForget</h1>\n        <PasswordForgetForm />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    email: \"\",\n    error: null\n};\n\nclass PasswordForgetFormBase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { email } = this.state;\n\n        this.props.firebase\n            .doPasswordReset(email)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { email, error } = this.state;\n\n        const isInvalid = email === \"\";\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    placeholder=\"Email Address\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Reset My Password\n                </button>\n\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst PasswordForgetLink = () => (\n    <p>\n        <Link to={ROUTES.PASSWORD_FORGET}>Forgot Password?</Link>\n    </p>\n);\n\nexport default PasswordForgetPage;\n\nconst PasswordForgetForm = withFirebase(PasswordForgetFormBase);\n\nexport { PasswordForgetForm, PasswordForgetLink };\n","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { compose } from \"recompose\";\n\nimport { SignUpLink } from \"../SignUp\";\nimport { PasswordForgetLink } from \"../PasswordForget\";\nimport { withFirebase } from \"../Firebase\";\nimport * as ROUTES from \"../../constants/routes\";\n\nconst SignInPage = () => (\n    <div>\n        <h1>SignIn</h1>\n        <SignInForm />\n        <PasswordForgetLink />\n        <SignUpLink />\n    </div>\n);\n\nconst INITIAL_STATE = {\n    email: \"\",\n    password: \"\",\n    error: null\n};\n\nclass SignInFormBase extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { email, password } = this.state;\n\n        this.props.firebase\n            .doSignInWithEmailAndPassword(email, password)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n                this.props.history.push(ROUTES.HOME);\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { email, password, error } = this.state;\n\n        const isInvalid = password === \"\" || email === \"\";\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"email\"\n                    value={email}\n                    onChange={this.onChange}\n                    type=\"text\"\n                    autoComplete=\"username\"\n                    placeholder=\"Email Address\"\n                />\n                <input\n                    name=\"password\"\n                    value={password}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    placeholder=\"Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Sign In\n                </button>\n\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nconst SignInForm = compose(\n    withRouter,\n    withFirebase\n)(SignInFormBase);\n\nexport default SignInPage;\n\nexport { SignInForm };\n","import React from \"react\";\n\nimport { withAuthorization } from \"../Session\";\n\nconst HomePage = () => (\n    <div>\n        <h1>Home Page</h1>\n        <p>The Home Page is accessible by every signed in user.</p>\n    </div>\n);\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(HomePage);\n","import React, { Component } from \"react\";\n\nimport { withFirebase } from \"../Firebase\";\n\nconst INITIAL_STATE = {\n    passwordOne: \"\",\n    passwordTwo: \"\",\n    error: null\n};\n\nclass PasswordChangeForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { ...INITIAL_STATE };\n    }\n\n    onSubmit = event => {\n        const { passwordOne } = this.state;\n\n        this.props.firebase\n            .doPasswordUpdate(passwordOne)\n            .then(() => {\n                this.setState({ ...INITIAL_STATE });\n            })\n            .catch(error => {\n                this.setState({ error });\n            });\n\n        event.preventDefault();\n    };\n\n    onChange = event => {\n        this.setState({ [event.target.name]: event.target.value });\n    };\n\n    render() {\n        const { passwordOne, passwordTwo, error } = this.state;\n\n        const isInvalid = passwordOne !== passwordTwo || passwordOne === \"\";\n\n        return (\n            <form onSubmit={this.onSubmit}>\n                <input\n                    name=\"passwordOne\"\n                    value={passwordOne}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    autoComplete=\"new-password\"\n                    placeholder=\"New Password\"\n                />\n                <input\n                    name=\"passwordTwo\"\n                    value={passwordTwo}\n                    onChange={this.onChange}\n                    type=\"password\"\n                    autoComplete=\"new-password\"\n                    placeholder=\"Confirm New Password\"\n                />\n                <button disabled={isInvalid} type=\"submit\">\n                    Reset My Password\n                </button>\n\n                {error && <p>{error.message}</p>}\n            </form>\n        );\n    }\n}\n\nexport default withFirebase(PasswordChangeForm);\n","import React from \"react\";\n\nimport { AuthUserContext } from \"../Session\";\nimport { PasswordForgetForm } from \"../PasswordForget\";\nimport PasswordChangeForm from \"../PasswordChange\";\nimport { withAuthorization } from \"../Session\";\n\nconst AccountPage = () => (\n    <AuthUserContext.Consumer>\n        {authUser => (\n            <div>\n                <h1>Account: {authUser.email}</h1>\n                <PasswordForgetForm />\n                <PasswordChangeForm />\n            </div>\n        )}\n    </AuthUserContext.Consumer>\n);\n\nconst authCondition = authUser => !!authUser;\n\nexport default withAuthorization(authCondition)(AccountPage);\n","import React, { Component } from \"react\";\n\nimport { withFirebase } from \"../Firebase\";\n\nclass AdminPage extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: false,\n            users: []\n        };\n    }\n\n    componentDidMount() {\n        this.setState({ loading: true });\n\n        this.props.firebase.users().on(\"value\", snapshot => {\n            const usersObject = snapshot.val();\n\n            const usersList = Object.keys(usersObject).map(key => ({\n                ...usersObject[key],\n                uid: key\n            }));\n\n            this.setState({\n                users: usersList,\n                loading: false\n            });\n        });\n    }\n\n    componentWillUnmount() {\n        this.props.firebase.users().off();\n    }\n\n    render() {\n        const { users, loading } = this.state;\n        return (\n            <div>\n                <h1>Admin</h1>\n\n                {loading && <div>Loading ...</div>}\n\n                <UserList users={users} />\n            </div>\n        );\n    }\n}\n\nconst UserList = ({ users }) => (\n    <ul>\n        {users.map(user => (\n            <li key={user.uid}>\n                <span>\n                    <strong>ID:</strong> {user.uid}\n                </span>\n                <span>\n                    <strong>E-Mail:</strong> {user.email}\n                </span>\n                <span>\n                    <strong>Username:</strong> {user.username}\n                </span>\n            </li>\n        ))}\n    </ul>\n);\n\nexport default withFirebase(AdminPage);\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\n\nimport Navigation from \"../Navigation\";\nimport LandingPage from \"../Landing\";\nimport SignUpPage from \"../SignUp\";\nimport SignInPage from \"../SignIn\";\nimport PasswordForgetPage from \"../PasswordForget\";\nimport HomePage from \"../Home\";\nimport AccountPage from \"../Account\";\nimport AdminPage from \"../Admin\";\n\nimport * as ROUTES from \"../../constants/routes\";\nimport { withAuthentication } from \"../Session\";\n\nconst App = () => (\n    <Router>\n        <div>\n            <Navigation />\n\n            <hr />\n\n            <Route exact path={ROUTES.LANDING} component={LandingPage} />\n            <Route exact path={ROUTES.SIGN_UP} component={SignUpPage} />\n            <Route exact path={ROUTES.SIGN_IN} component={SignInPage} />\n            <Route\n                exact\n                path={ROUTES.PASSWORD_FORGET}\n                component={PasswordForgetPage}\n            />\n            <Route exact path={ROUTES.HOME} component={HomePage} />\n            <Route exact path={ROUTES.ACCOUNT} component={AccountPage} />\n            <Route exact path={ROUTES.ADMIN} component={AdminPage} />\n        </div>\n    </Router>\n);\n\nexport default withAuthentication(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./components/App\";\nimport Firebase, { FirebaseContext } from \"./components/Firebase\";\n\nReactDOM.render(\n    <FirebaseContext.Provider value={new Firebase()}>\n        <App />\n    </FirebaseContext.Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}